#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from project import myService
from project.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  RegisterResponse registerRequest(string username, string password, string name, string email)')
  print('  LoginResponse login(string username, string password, string mac)')
  print('  LogoutResponse logout(string mac)')
  print('  AddDeviceResponse addDevice(string mac, string devicename, string certfile)')
  print('  RenameDeviceResponse renameDevice(string mac, string devicename)')
  print('  UpdateIpResponse updateIp(string mac)')
  print('   getDevices()')
  print('  string getFileMetaData(i64 deviceId)')
  print('  string getFile(i64 deviceId, string filePath)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = myService.Client(protocol)
transport.open()

if cmd == 'registerRequest':
  if len(args) != 4:
    print('registerRequest requires 4 args')
    sys.exit(1)
  pp.pprint(client.registerRequest(args[0],args[1],args[2],args[3],))

elif cmd == 'login':
  if len(args) != 3:
    print('login requires 3 args')
    sys.exit(1)
  pp.pprint(client.login(args[0],args[1],args[2],))

elif cmd == 'logout':
  if len(args) != 1:
    print('logout requires 1 args')
    sys.exit(1)
  pp.pprint(client.logout(args[0],))

elif cmd == 'addDevice':
  if len(args) != 3:
    print('addDevice requires 3 args')
    sys.exit(1)
  pp.pprint(client.addDevice(args[0],args[1],args[2],))

elif cmd == 'renameDevice':
  if len(args) != 2:
    print('renameDevice requires 2 args')
    sys.exit(1)
  pp.pprint(client.renameDevice(args[0],args[1],))

elif cmd == 'updateIp':
  if len(args) != 1:
    print('updateIp requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateIp(args[0],))

elif cmd == 'getDevices':
  if len(args) != 0:
    print('getDevices requires 0 args')
    sys.exit(1)
  pp.pprint(client.getDevices())

elif cmd == 'getFileMetaData':
  if len(args) != 1:
    print('getFileMetaData requires 1 args')
    sys.exit(1)
  pp.pprint(client.getFileMetaData(eval(args[0]),))

elif cmd == 'getFile':
  if len(args) != 2:
    print('getFile requires 2 args')
    sys.exit(1)
  pp.pprint(client.getFile(eval(args[0]),args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
